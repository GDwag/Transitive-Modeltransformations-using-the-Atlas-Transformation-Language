-- @path Palladio=http://palladiosimulator.org/PalladioComponentModel/5.2
-- @path UML=http://www.eclipse.org/uml2/5.0.0/UML

module Palladio2UML;
-- Module Template
create OUT: UML from IN: Palladio;

rule Repostiory2Package {
	from R : Palladio!Repository
	to P : UML!Package (
		name <- R.entityName,
		packagedElement <- R.interfaces__Repository,
		nestedPackage <- R.components__Repository--->collect(e | thisModule.BasicComponent2Package(e))
	)
	
}

rule OperationInterface2Interface {
	from PI : Palladio!Interface
	to UI : UML!Interface (
		name <- PI.entityName,
		protocol <- PI.protocols__Interface
	)
}

rule BasicComponent2Package {
	from B : Palladio!BasicComponent
	to P : UML!Package (
		nestingPackage <- B.repository__RepositoryComponent,
		name <- B.entityName,
		packagedElement <- thisModule.BasicComponent2Class(B)
	)	
}

unique lazy rule BasicComponent2Class {
	from B : Palladio!BasicComponent
	to C : UML!Class (
		name <- B.entityName + 'Impl',
		extension <- B.providedRoles_InterfaceProvidingEntity, --rather interface realization?
		ownedAttribute <- B.requiredRoles_InterfaceRequiringEntity,
		ownedOperation <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Getter(e)),
		ownedOperation <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Setter(e))
	)
}

rule RequiredRole2Attribute {
	from R : Palladio!OperationRequiredRole
	to M : UML!Property (
   		name <- R.entityName--,
		--dataType <- R.requiredInterface__OperationRequiredRole,
		--class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole)
		-- + Parameter in Konstruktor
	)
}

lazy rule RequiredRole2Getter {
	from R : Palladio!OperationRequiredRole
	to M : UML!Operation (
   		name <- 'get' + R.entityName,
		class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole),
		type <- R.requiredInterface__OperationRequiredRole
	)
}

lazy rule RequiredRole2Setter {
	from R : Palladio!OperationRequiredRole
	to --TS : UML!TemplateSignature(
		--template <- R.requiredInterface__OperationRequiredRole,
		--parameter <- TP
	--),
	--TP : UML!OperationTemplateParameter (
		--signature <- TS,
		--parameteredElement <- M
	--),
	M : UML!Operation (
   		name <- 'set' + R.entityName,
		class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole)--,
		--owningTemplateParameter <- TP
	)
}

rule ProvidedRole2Extension {
	from P : Palladio!OperationProvidedRole
	to E : UML!Extension(
		name <- P.entityName
	)
}

--CompositeDataType und CompositeComponent nicht verwandt? gewollt?!
rule CompositeDataType2Class { --? wie getter und setter einrichten? TODO
	from D : Palladio!CompositeDataType
	to C : UML!Class (
		nestedClassifier <- D.innerDeclaration_CompositeDataType
	)	
}

rule InnerDeclaration2Class { --? kaum inhalte in inner declaration, wie soll ich daraus eine sinnvolle klasse machen? TODO
	from I : Palladio!InnerDeclaration
	to C : UML!Class (
		name <- I.entityName
	)
}

rule CollectionDataType2Class {
	from D : Palladio!CollectionDataType
	to C : UML!Class (
		
	)	
	
}