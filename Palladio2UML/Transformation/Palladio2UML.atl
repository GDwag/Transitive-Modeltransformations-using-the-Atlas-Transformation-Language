-- @path Palladio=http://palladiosimulator.org/PalladioComponentModel/5.2
-- @path UML=http://www.eclipse.org/uml2/5.0.0/UML

module Palladio2UML;
-- Module Template
create OUT: UML from IN: Palladio;

rule Repository2Model {
	from R : Palladio!Repository
	to M : UML!Model (
		name <- 'MediaStore',
		nestedPackage <- thisModule.Repostiory2DefaultPackage(R),
		nestedPackage <- thisModule.Repostiory2ContractsPackage(R),
		nestedPackage <- thisModule.Repostiory2DatatypesPackage(R)
	)
}

--Package Stuff
unique lazy rule Repostiory2DefaultPackage {
	from R : Palladio!Repository
	to P : UML!Package ( --Components
		name <- R.entityName,
		nestedPackage <- R.components__Repository
	)
}

unique lazy rule Repostiory2ContractsPackage {
	from R : Palladio!Repository
	to P2 : UML!Package ( --Interfaces		--scheint nicht so zu funktionieren, andere packages werden nicht angelegt
		name <- R.entityName + 'Contracts',
		packagedElement <- R.interfaces__Repository->collect(e | thisModule.OperationInterface2Interface(e))
	)
}

unique lazy rule Repostiory2DatatypesPackage {
	from R : Palladio!Repository
	to P3 : UML!Package ( --Datatypes
		name <- R.entityName + 'Datatypes',
		packagedElement <- R.dataTypes__Repository->collect(e | if e->oclIsTypeOf(Palladio!CompositeDataType) then thisModule.CompositeDataType2Class(e) else thisModule.DataType2DataType(e) endif)
	)
}
--Package Stuff end

unique lazy rule DataType2DataType {
	from D : Palladio!DataType
	to T : UML!DataType (
		name <- D.entityName
		--no transformable content - Palladio DataType doesn't inherit from anything and has its repository as only attribute
	)
}

--Interface Stuff
unique lazy rule OperationInterface2Interface { --WARNING - making this *unique* was necessary for some later *references*, but making it *unique* required making it *lazy*, and making it *lazy* mean i need to *manually* use it for every interface
	from PI : Palladio!Interface
	to UI : UML!Interface (
		name <- PI.entityName,
		protocol <- PI.protocols__Interface,
		ownedOperation <- PI.signatures__OperationInterface->collect(e | thisModule.Signature2Operation(e))--,
	)
}


	--Signature-Stuff
unique lazy rule Signature2Operation {
	from S : Palladio!Signature
	to O : UML!Operation (
		name <- S.entityName,
		--returnType so nur möglich, weil im Modell alle returnTypes von signaturen Composite-Datatypes sind, sonst if-abfrage nötig, weil kein parent typ konkret genug ist
		--if-abfrage mit dirty-hack notwendiges übel, weil sonst "NullPointer" (bzw. OclUndefined) fehler auftreten, wenn kein returnType existiert
		ownedParameter <- 
		if not S.returnType__OperationSignature->oclIsUndefined()
			then thisModule.CompositeDataType2ReturnParameter(S.returnType__OperationSignature)
			--TODO dirty Hack, der nur aufgeht weil Parameter2Parameter unique ist
			else S.parameters__OperationSignature->collect(e | thisModule.Parameter2Parameter(e)) --owned correct? also non-containment alternative available
		endif,
		ownedParameter <- S.parameters__OperationSignature->collect(e | thisModule.Parameter2Parameter(e)) --owned correct? also non-containment alternative available
	)
}
	
lazy rule CompositeDataType2ReturnParameter {
	from D : Palladio!CompositeDataType
	to R : UML!Parameter (
		name <- D.entityName,
		type <- thisModule.CompositeDataType2Class(D),
		direction <- #return --thisModule.DataType2ReturnParameterDirectionKind(D) --return
	)
}

--lazy rule DataType2ReturnParameterDirectionKind {
--	from D : Palladio!DataType
--	to P : UML!ParameterDirectionKind (
--		name <- 'return'
--	)
--}

unique lazy rule Parameter2Parameter {
	from P : Palladio!Parameter
	to T : UML!Parameter (
		name <- P.parameterName,
		type <- thisModule.CompositeDataType2Class(P.dataType__Parameter)--,
		--direction <- #in -- doesn't work, but doesn't seem to be necessary
		--TODO how to get from PCM-Parameter-Type to a type definition in UML?
	)
}
	--Signature Stuff end
--Interface Stuff end

rule Protocol2ProtocalStateMachine { --WARNING no change in model - why?
	from PP : Palladio!Protocol
	to UP: UML!ProtocalStateMachine ( --Palladio Protocol only has EString ID, which UML doesnt
	)
}

--Component Stuff
rule BasicComponent2Package {
	from B : Palladio!BasicComponent
	to P : UML!Package (
		nestingPackage <- thisModule.Repostiory2DefaultPackage(B.repository__RepositoryComponent),
		name <- B.entityName,
		packagedElement <- thisModule.BasicComponent2Class(B)
	)	
}

unique lazy rule BasicComponent2Class {
	from B : Palladio!BasicComponent
	to C : UML!Class (
		name <- B.entityName + 'Impl',
		interfaceRealization <- B.providedRoles_InterfaceProvidingEntity, --NOT extension - extensions refer to stereotypes
		ownedAttribute <- B.requiredRoles_InterfaceRequiringEntity,
		ownedOperation <- thisModule.Component2Operation(B),
		ownedOperation <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Getter(e)),
		ownedOperation <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Setter(e))
	)
}

-- constructor
unique lazy rule Component2Operation {
	from B : Palladio!BasicComponent
	to A : UML!Operation(
		name <- B.entityName + 'Impl',
		ownedParameter <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Parameter(e))
	)
}

rule RequiredRole2Attribute {
	from R : Palladio!OperationRequiredRole
	to M : UML!Property (
   		name <- 'required_' + R.entityName,
		type <- thisModule.OperationInterface2Interface(R.requiredInterface__OperationRequiredRole)
		--class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole) --"feature 'class' is not changeable" - allready given by inheritance?
		-- + Parameter in Konstruktor -- ist eigener typ (?)
	)
}

lazy rule RequiredRole2Parameter {
	from R : Palladio!OperationRequiredRole
	to M : UML!Parameter (
   		name <- 'required_' + R.entityName,
		type <- thisModule.OperationInterface2Interface(R.requiredInterface__OperationRequiredRole)
	)
}

lazy rule RequiredRole2Getter {
	from R : Palladio!OperationRequiredRole
	to M : UML!Operation (
   		name <- 'get' + R.entityName,
		class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole),
		type <-  thisModule.OperationInterface2Interface(R.requiredInterface__OperationRequiredRole)--, --this is a return type, though it is a "parameter" in the model
		--ownedTemplateSignature <- R.requiredInterface__OperationRequiredRole.signatures__OperationInterface->collect(e | thisModule.Signature2TemplateSignature(e)) --not good, because causes signatures to be stored in Operations instead of Interfaces. Workarround?
	)
}

lazy rule RequiredRole2Setter {
	from R : Palladio!OperationRequiredRole
	to M : UML!Operation (
   		name <- 'set' + R.entityName,
		class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole),
		ownedParameter <- thisModule.RequiredRole2Parameter(R)
	)
}

rule ProvidedRole2InterfaceRealization {
	from P : Palladio!OperationProvidedRole
	to E : UML!InterfaceRealization(
		name <- P.entityName,
		implementingClassifier <- thisModule.BasicComponent2Class(P.providingEntity_ProvidedRole)
	)
}
--Class Stuff end

unique lazy rule CompositeDataType2Class { --? wie getter und setter einrichten? TODO
	from D : Palladio!CompositeDataType
	to C : UML!Class (
		name <- D.entityName,
		nestedClassifier <- D.innerDeclaration_CompositeDataType
	)	
}

rule InnerDeclaration2Class { --? kaum inhalte in inner declaration, wie soll ich daraus eine sinnvolle klasse machen? TODO
	from I : Palladio!InnerDeclaration
	to C : UML!Class (
		name <- I.entityName
	)
}

--no CompositeDataType found in MediaStore example
--rule CollectionDataType2Class {
--	from D : Palladio!CollectionDataType
--	to C : UML!Class (
--		
--	)	
--	
--}