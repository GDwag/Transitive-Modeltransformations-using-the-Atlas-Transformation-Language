-- @path Palladio=http://palladiosimulator.org/PalladioComponentModel/5.2
-- @path UML=http://www.eclipse.org/uml2/5.0.0/UML

module Palladio2UML;
-- Module Template
create OUT: UML from IN: Palladio;

rule Repository2Model {
	from repository : Palladio!Repository
	to model : UML!Model (
		name <- 'MediaStore',
		nestedPackage <- thisModule.Repostiory2ContractsPackage(repository),
		nestedPackage <- thisModule.Repostiory2DatatypesPackage(repository),
		nestedPackage <- thisModule.Repostiory2DefaultPackage(repository)
	)
}

--Package Stuff
unique lazy rule Repostiory2DefaultPackage {
	from repository : Palladio!Repository
	to package : UML!Package ( --Components
		name <- repository.entityName,
		nestedPackage <- repository.components__Repository
	)
}

unique lazy rule Repostiory2ContractsPackage {
	from repository : Palladio!Repository
	to package : UML!Package ( --Interfaces		--scheint nicht so zu funktionieren, andere packages werden nicht angelegt
		name <- repository.entityName + 'Contracts',
		packagedElement <- repository.interfaces__Repository->collect(e | thisModule.OperationInterface2Interface(e))
	)
}

unique lazy rule Repostiory2DatatypesPackage {
	from repository : Palladio!Repository
	to package : UML!Package ( --Datatypes
		name <- repository.entityName + 'DataTypes',
		packagedElement <- repository.dataTypes__Repository->collect(e | if e->oclIsTypeOf(Palladio!CompositeDataType) then thisModule.CompositeDataType2Class(e) else thisModule.DataType2DataType(e) endif)
	)
}
--Package Stuff end

unique lazy rule DataType2DataType {
	from pcm_data_type : Palladio!DataType
	to uml_data_type : UML!DataType (
		name <- pcm_data_type.entityName
		--no transformable content - Palladio DataType doesn't inherit from anything and has its repository as only attribute
	)
}

--Interface Stuff
unique lazy rule OperationInterface2Interface { --WARNING - making this *unique* was necessary for some later *references*, but making it *unique* required making it *lazy*, and making it *lazy* mean i need to *manually* use it for every interface
	from pcm_interface : Palladio!Interface
	to uml_interface : UML!Interface (
		name <- pcm_interface.entityName,
		protocol <- pcm_interface.protocols__Interface,
		ownedOperation <- pcm_interface.signatures__OperationInterface->collect(e | thisModule.Signature2Operation(e))--,
	)
}


	--Signature-Stuff
unique lazy rule Signature2Operation {
	from signature : Palladio!Signature
	to operation : UML!Operation (
		name <- signature.entityName,
		--returnType so nur möglich, weil im Modell alle returnTypes von signaturen Composite-Datatypes sind, sonst if-abfrage nötig, weil kein parent typ konkret genug ist
		--if-abfrage mit dirty-hack notwendiges übel, weil sonst "NullPointer" (bzw. OclUndefined) fehler auftreten, wenn kein returnType existiert
		ownedParameter <- 
		if not signature.returnType__OperationSignature->oclIsUndefined()
			then thisModule.CompositeDataType2ReturnParameter(signature.returnType__OperationSignature)
			else Set{}
		endif,
		ownedParameter <- signature.parameters__OperationSignature->collect(e | thisModule.Parameter2Parameter(e)) --owned correct? also non-containment alternative available
	)
}
	
lazy rule CompositeDataType2ReturnParameter {
	from composite_data_type : Palladio!CompositeDataType
	to parameter : UML!Parameter (
		name <- composite_data_type.entityName,
		type <- thisModule.CompositeDataType2Class(composite_data_type),
		direction <- #return --thisModule.DataType2ReturnParameterDirectionKind(D) --return
	)
}

unique lazy rule Parameter2Parameter {
	from pcm_parameter : Palladio!Parameter
	to uml_parameter : UML!Parameter (
		name <- pcm_parameter.parameterName,
		type <- thisModule.CompositeDataType2Class(pcm_parameter.dataType__Parameter)--,
		--direction <- #in -- not necessary, as it is the default setting
	)
}
	--Signature Stuff end
--Interface Stuff end

--Component Stuff
rule BasicComponent2Package {
	from component : Palladio!BasicComponent
	to package : UML!Package (
		nestingPackage <- thisModule.Repostiory2DefaultPackage(component.repository__RepositoryComponent),
		name <- component.entityName,
		packagedElement <- thisModule.BasicComponent2Class(component)
	)	
}

unique lazy rule BasicComponent2Class {
	from component : Palladio!BasicComponent
	to class : UML!Class (
		name <- component.entityName + 'Impl',
		interfaceRealization <- component.providedRoles_InterfaceProvidingEntity, --NOT extension - extensions refer to stereotypes
		ownedAttribute <- component.requiredRoles_InterfaceRequiringEntity,
		ownedOperation <- thisModule.Component2Operation(component),
		ownedOperation <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Getter(e)),
		ownedOperation <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Setter(e))
	)
}

-- constructor
unique lazy rule Component2Operation {
	from component : Palladio!BasicComponent
	to constructor : UML!Operation(
		name <- component.entityName + 'Impl',
		ownedParameter <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Parameter(e))
	)
}

rule RequiredRole2Attribute {
	from required_role : Palladio!OperationRequiredRole
	to attribute : UML!Property (
   		name <- 'required_' + required_role.entityName,
		type <- thisModule.OperationInterface2Interface(required_role.requiredInterface__OperationRequiredRole)
		--class <- thisModule.BasicComponent2Class(R.requiringEntity_RequiredRole) --"feature 'class' is not changeable" - allready given by inheritance?
		-- + Parameter in Konstruktor -- ist eigener typ (?)
	)
}

lazy rule RequiredRole2Parameter {
	from required_role : Palladio!OperationRequiredRole
	to parameter : UML!Parameter (
   		name <- 'required_' + required_role.entityName,
		type <- thisModule.OperationInterface2Interface(required_role.requiredInterface__OperationRequiredRole)
	)
}

lazy rule RequiredRole2Getter {
	from required_role : Palladio!OperationRequiredRole
	to getter : UML!Operation (
   		name <- 'get' + required_role.entityName,
		class <- thisModule.BasicComponent2Class(required_role.requiringEntity_RequiredRole),
		type <-  thisModule.OperationInterface2Interface(required_role.requiredInterface__OperationRequiredRole)--, --this is a return type, though it is a "parameter" in the model
	)
}

lazy rule RequiredRole2Setter {
	from required_role : Palladio!OperationRequiredRole
	to setter : UML!Operation (
   		name <- 'set' + required_role.entityName,
		class <- thisModule.BasicComponent2Class(required_role.requiringEntity_RequiredRole),
		ownedParameter <- thisModule.RequiredRole2Parameter(required_role)
	)
}

rule ProvidedRole2InterfaceRealization {
	from provided_role : Palladio!OperationProvidedRole
	to interface_realization : UML!InterfaceRealization(
		name <- provided_role.entityName,
		implementingClassifier <- thisModule.BasicComponent2Class(provided_role.providingEntity_ProvidedRole),
		contract <-thisModule.OperationInterface2Interface(provided_role.providedInterface__OperationProvidedRole)
	)
}
--Class Stuff end

unique lazy rule CompositeDataType2Class { --? wie getter und setter einrichten? TODO
	from composite_data_type : Palladio!CompositeDataType
	to class : UML!Class (
		name <- composite_data_type.entityName,
		nestedClassifier <- composite_data_type.innerDeclaration_CompositeDataType
	)	
}

rule InnerDeclaration2Class { --? kaum inhalte in inner declaration, wie soll ich daraus eine sinnvolle klasse machen? TODO
	from inner_declaration : Palladio!InnerDeclaration
	to class : UML!Class (
		name <- inner_declaration.entityName
	)
}