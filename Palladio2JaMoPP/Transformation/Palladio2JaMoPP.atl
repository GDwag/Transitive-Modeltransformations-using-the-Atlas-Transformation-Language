-- @path Palladio=http://palladiosimulator.org/PalladioComponentModel/5.2
-- @path JaMoPP=http://www.emftext.org/java/

module Palladio2JaMoPP;
-- Module Template
create OUT : JaMoPP from IN: Palladio;

rule Repostiory2Package {
	from repository : Palladio!Repository
	to package : JaMoPP!Package (
		name <- 'MediaStore'
	),
	PI : JaMoPP!Package (
		name <- 'MediaStore.' + repository.entityName + 'Contracts',
		compilationUnits <- repository.interfaces__Repository->collect(e | thisModule.OperationInterface2CompilationUnit(e))
		--imports <- repository.components__Repository --how to create sub-Packages?!
	),
	PD : JaMoPP!Package (
		name <- 'MediaStore.' + repository.entityName + 'DataTypes',
		compilationUnits <- repository.dataTypes__Repository
	),
	PC : JaMoPP!Package (
		name <- 'MediaStore.' + repository.entityName--,
		--compilationUnits <- repository.components__Repository --each their own package instead - seperate, but with a corresponding name
	)
}



--anything better than class? TypeParameter doesn't work, as it is no concrete classifier
unique lazy rule DataType2Class {
	from data_type : Palladio!DataType
	to class : JaMoPP!Class (
		name <- data_type.entityName
		--no transformable content - Palladio DataType doesn't inherit from anything and has its repository as only attribute
	)
}

--Interface Foo
unique lazy rule OperationInterface2CompilationUnit {
	from interface : Palladio!OperationInterface
	to compilation_unit : JaMoPP!CompilationUnit (
		name <- interface.entityName,
		classifiers <- thisModule.OperationInterface2Interface(interface)
	)
}

unique lazy rule OperationInterface2Interface {
	from pcm_interface : Palladio!OperationInterface
	to java_interface : JaMoPP!Interface (
		name <- pcm_interface.entityName,
		members <- pcm_interface.signatures__OperationInterface->collect(e | thisModule.Signature2ClassMethod(e))
	)
}

unique lazy rule Signature2ClassMethod{
	from signature : Palladio!Signature
	to method : JaMoPP!ClassMethod (
		name <- signature.entityName,
		--returnType so nur möglich, weil im Modell alle returnTypes von signaturen Composite-Datatypes sind, sonst if-abfrage nötig, weil kein parent typ konkret genug ist
		--if-abfrage mit dirty-hack notwendiges übel, weil sonst "NullPointer" (bzw. OclUndefined) fehler auftreten, wenn kein returnType existiert
		typeReference <- 
		if not signature.returnType__OperationSignature->oclIsUndefined()
			then thisModule.CompositeDataType2ClassifierReference(signature.returnType__OperationSignature)
			else Set{}
		endif,
		parameters <- signature.parameters__OperationSignature->collect(e | thisModule.Parameter2Parameter(e))
	)
}

unique lazy rule Parameter2Parameter {
	from pcm_parameter : Palladio!Parameter
	to java_parameter : JaMoPP!OrdinaryParameter (
		name <- pcm_parameter.parameterName,
		--so nur möglich, weil im Modell alle Parameter Typen Composite-Datatypes sind, sonst if-abfrage nötig, weil kein parent typ konkret genug ist
		typeReference <- thisModule.CompositeDataType2ClassifierReference(pcm_parameter.dataType__Parameter)
	)
}
--Interface Foo end

--Component Foo
rule BasicComponent2Package {
	from component : Palladio!BasicComponent
	to package : JaMoPP!Package (
		name <- 'MediaStore.' + component.repository__RepositoryComponent.entityName + '.' + component.entityName,
		compilationUnits <- thisModule.BasicComponent2CompilationUnit(component)
	)
}

lazy rule BasicComponent2CompilationUnit {
	from component : Palladio!BasicComponent
	to compilation_unit : JaMoPP!CompilationUnit (
		name <- component.entityName + 'Impl',
		classifiers <- thisModule.BasicComponent2Class(component)
	)
}

unique lazy rule BasicComponent2Class {
	from component : Palladio!BasicComponent
	to class : JaMoPP!Class(
		name <- component.entityName + 'Impl',
		implements <- component.providedRoles_InterfaceProvidingEntity,
		members <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Field(e)),
		members <- thisModule.BasicComponent2Constructor(component),
		members <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Getter(e)),
		members <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Setter(e))
	)
}

	--Component Member Foo
unique lazy rule RequiredRole2Field {
	from required_role : Palladio!OperationRequiredRole
	to field : JaMoPP!Field(
   		name <- 'required_' + required_role.entityName,
		typeReference <- thisModule.OperationInterface2ClassifierReference(required_role.requiredInterface__OperationRequiredRole)
	)
}
	
lazy rule BasicComponent2Constructor {
	from component : Palladio!BasicComponent
	to constructor : JaMoPP!Constructor (
		name <- component.entityName + 'Impl',
		parameters <- component.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Parameter(e))
	)
}

		--Member Ref. to Interface
lazy rule OperationInterface2ClassifierReference {
	from interface : Palladio!OperationInterface
	to classifier_reference : JaMoPP!ClassifierReference (
		target <- thisModule.OperationInterface2Interface(interface)
	)
}

lazy rule RequiredRole2Getter {
	from required_role : Palladio!OperationRequiredRole
	to getter : JaMoPP!ClassMethod(
		name <- 'get' + required_role.entityName,
		typeReference <- thisModule.OperationInterface2ClassifierReference(required_role.requiredInterface__OperationRequiredRole)
	)
}

lazy rule RequiredRole2Setter {
	from required_role : Palladio!OperationRequiredRole
	to setter : JaMoPP!ClassMethod(
		name <- 'set' + required_role.entityName,
		parameters <- thisModule.RequiredRole2Parameter(required_role)
	)
}

		--Member Ref. to Interface
lazy rule OperationInterface2Parameter {
	from interface : Palladio!OperationInterface
	to parameter : JaMoPP!OrdinaryParameter (
		name <- 'required_' + interface.entityName,
		typeReference <- thisModule.OperationInterface2ClassifierReference(interface)
	)
}
		
lazy rule RequiredRole2Parameter {
	from required_role : Palladio!OperationRequiredRole
	to parameter : JaMoPP!OrdinaryParameter (
		name <- 'required_' + required_role.entityName,
		typeReference <- thisModule.OperationInterface2ClassifierReference(required_role.requiredInterface__OperationRequiredRole)
	)
}

rule ProvidedRole2ClassifierReference {
	from provided_role : Palladio!OperationProvidedRole
	to classifier_reference : JaMoPP!ClassifierReference(
		--target <- thisModule.BasicComponent2Class(provided_role.providingEntity_ProvidedRole)
		target <- thisModule.OperationInterface2Interface(provided_role.providedInterface__OperationProvidedRole)
	)
}
	--Component Member Foo end
--Component Foo end

--CompositeDataType Foo
rule CompositeDataType2CompilationUnit {
	from composite_data_type : Palladio!CompositeDataType
	to compilation_unit : JaMoPP!CompilationUnit (
		name <- composite_data_type.entityName,
		classifiers <- thisModule.CompositeDataType2Class(composite_data_type)
	)
}

unique lazy rule CompositeDataType2Class { --? wie getter und setter einrichten? TODO
	from composite_data_type : Palladio!CompositeDataType
	to class : JaMoPP!Class (
		name <- composite_data_type.entityName,
		members <- composite_data_type.innerDeclaration_CompositeDataType --Java Class erbt von Member UND MemberContainer
	)	
}

rule InnerDeclaration2Class { --? kaum inhalte in inner declaration, wie soll ich daraus eine sinnvolle klasse machen? TODO
	from inner_declaration : Palladio!InnerDeclaration
	to class : JaMoPP!Class (
		name <- inner_declaration.entityName
	)
}

lazy rule CompositeDataType2ClassifierReference {
	from composite_data_type : Palladio!CompositeDataType
	to classifier_reference : JaMoPP!ClassifierReference (
		target <- thisModule.CompositeDataType2Class(composite_data_type)
	)
}
--CompositeDataType Foo end