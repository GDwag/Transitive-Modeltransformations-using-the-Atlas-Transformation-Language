-- @path Palladio=http://palladiosimulator.org/PalladioComponentModel/5.2
-- @path JaMoPP=http://www.emftext.org/java/

module Palladio2JaMoPP;
-- Module Template
create OUT : JaMoPP from IN: Palladio;

rule Repostiory2Package {
	from R : Palladio!Repository
	to CUI : JaMoPP!CompilationUnit (
		classifiers <- R.interfaces__Repository
	),
	PI : JaMoPP!Package (
		name <- R.entityName + 'Contracts',
		compilationUnits <- CUI--,
		--imports <- R.components__Repository --how to create sub-Packages?!
	),
	PC : JaMoPP!Package (
		name <- R.entityName,
		compilationUnits <- R.components__Repository
		--subPackages <- R.components__Repository
	),
	CUD : JaMoPP!CompilationUnit (
		classifiers <- R.dataTypes__Repository
	),
	PD : JaMoPP!Package (
		name <- R.entityName + 'DataTypes',
		compilationUnits <- CUD
	)
}

--rule DataType2TypeParameter {
	
--}

--WARNING CompilationUnit instead of Package ok? JaMoPP doesn't know subpackages...
--unique lazy rule BasicComponent2Package {
--	from B : Palladio!BasicComponent
--	to P : JaMoPP!Package(
--		name <- 'Repo/' + B.entityName,
--		compilationUnits <- thisModule.BasicComponent2CompilationUnit(B)
--	)
--}

rule BasicComponent2CompilationUnit {
	from B : Palladio!BasicComponent
	to CU : JaMoPP!CompilationUnit (
		name <- B.entityName,
		classifiers <- thisModule.BasicComponent2Class(B)
	)
}

unique lazy rule BasicComponent2Class {
	from B : Palladio!BasicComponent
	to C : JaMoPP!Class(
		name <- B.entityName + 'Impl',
		implements <- B.providedRoles_InterfaceProvidingEntity,
		members <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Field(e)),
		members <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Getter(e)),
		members <- B.requiredRoles_InterfaceRequiringEntity->collect(e | thisModule.RequiredRole2Setter(e))
	)
}

lazy rule RequiredRole2Field {
	from R : Palladio!OperationRequiredRole
	to F : JaMoPP!Field(
   		name <- R.entityName--,
		--typeParameters <- R.requiredInterface__OperationRequiredRole
	)
}

lazy rule RequiredRole2Getter {
	from R : Palladio!OperationRequiredRole
	to G: JaMoPP!ClassMethod(
		name <- 'get' + R.entityName,
		typeParameters <- R.requiredInterface__OperationRequiredRole.signatures__OperationInterface
	)
}

lazy rule RequiredRole2Setter {
	from R : Palladio!OperationRequiredRole
	to S: JaMoPP!ClassMethod(
		name <- 'set' + R.entityName--,
		--parameters <- R.requiredInterface__OperationRequiredRole
	)
}

rule ProvidedRole2ClassifierReference {
	from P : Palladio!OperationProvidedRole
	to T : JaMoPP!ClassifierReference(
		target <- thisModule.BasicComponent2Class(P.providingEntity_ProvidedRole)
	)
}

rule OperationInterface2Interface {
	from O : Palladio!OperationInterface
	to I : JaMoPP!Interface (
		name <- O.entityName,
		typeParameters <- O.signatures__OperationInterface
	)
}

rule Signature2TypeParameter {
	from S :  Palladio!Signature
	to T :  JaMoPP!TypeParameter (
		name <- S.entityName,
		extendTypes <- Set {S.parameters__OperationSignature}
	)
}

--CompositeDataType und CompositeComponent nicht verwandt? gewollt?!
rule CompositeDataType2Class { --? wie getter und setter einrichten? TODO
	from D : Palladio!CompositeDataType
	to C : JaMoPP!Class (
		members <- D.innerDeclaration_CompositeDataType --Java Class erbt von Member UND MemberContainer
	)	
}

rule InnerDeclaration2Class { --? kaum inhalte in inner declaration, wie soll ich daraus eine sinnvolle klasse machen? TODO
	from I : Palladio!InnerDeclaration
	to C : JaMoPP!Class (
		name <- I.entityName
	)
}

rule CollectionDataType2Class { --? keine ArrayList in JaMoPP?! (nicht der suchfunktion vertrauen) -MemberContainer-erbe?
	from D : Palladio!CollectionDataType
	to C : JaMoPP!Class (
		
	)	
	
}
