-- @path UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @path JaMoPP=http://www.emftext.org/java/

module UML2JaMoPP;
-- Module Template
create OUT: JaMoPP from IN: UML; 

helper context UML!Model def: setupPackages() : String =
	self.nestedPackage->collect(e | thisModule.Package2Package(e).name)->sum();

rule Model2EmptyModel {
	from M : UML!Model
	to E : JaMoPP!EmptyModel (
		name <-	M->setupPackages(), --dirty Hack to force hierarchical
		name <- M.name
	)
}

unique lazy rule Package2Package {
	from P1 : UML!Package
	to P2 : JaMoPP!Package (
		name <- P1.name,
		compilationUnits <- P1.nestedPackage->collect(e | thisModule.Package2CompilationUnit(e))
	)
}

unique lazy rule Package2CompilationUnit {
	from P : UML!Package
	to C : JaMoPP!CompilationUnit (
		name <- P.name,
		classifiers <- P.packagedElement
	)
}

rule Class2Class {
	from C1: UML!Class
	to C2 : JaMoPP!Class(
		name <- C1.name,
		implements <- C1.interfaceRealization,
		members <- C1.ownedAttribute,
		members <- C1.ownedOperation
	)
}

rule Attribute2Field {
	from A : UML!Property
	to F : JaMoPP!Field(
   		name <- A.name
		-- + type
	)
}

rule Extension2ClassifierReference {
	from E : UML!Extension
	to C : JaMoPP!ClassifierReference(
	)
}

rule Interface2Interface {
	from I1 : UML!Interface
	to I2 : JaMoPP!Interface (
		name <- I1.name--,
		--typeParameters <- Set {O.signatures__OperationInterface}
	)
}

--rule Signature2TypeParameter {
--	from S :  Palladio!Signature
--	to T :  JaMoPP!TypeParameter (
--		name <- S.entityName,
--		extendTypes <- Set {S.parameters__OperationSignature}
--	)
--}
